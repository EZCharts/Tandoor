apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tandoor.fullname" . }}
  labels:
    {{- include "tandoor.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "tandoor.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tandoor.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tandoor.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: postgres
          image: "postgres:16-alpine"
          env:
            - name: DB_ENGINE
              value: {{ (.Values.db | default dict).engine | default "django.db.backends.postgresql" | quote }}
            - name: POSTGRES_DB
              value: {{ (.Values.db | default dict).name | default "djangodb" | quote }}
            - name: POSTGRES_HOST
              # Postgres is a sidecar in the same pod, so connect via localhost
              value: "127.0.0.1"
            - name: POSTGRES_PORT
              value: {{ (.Values.db | default dict).port | default "5432" | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: tandoor-login
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tandoor-login
                  key: password
          volumeMounts:
            - name: db-vol
              mountPath: /var/lib/postgresql/data
        - name: {{ .Chart.Name }} # This resolves to 'tandoor'
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "vabene1111/recipes:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DB_ENGINE
              value: {{ (.Values.db | default dict).engine | default "django.db.backends.postgresql" | quote }}
            - name: DISABLE_EXTERNAL_CONNECTORS
              value: {{ .Values.disable_external_connectors | default "0" | quote }}
            - name: EXTERNAL_CONNECTORS_QUEUE_SIZE
              value: {{ .Values.external_connectors_queue_size | default "100" | quote }}
            - name: POSTGRES_DB
              value: {{ (.Values.db | default dict).name | default "djangodb" | quote }}
            - name: POSTGRES_HOST
              # IMPORTANT: For sidecar containers, use localhost to connect to the other container in the same pod
              value: "127.0.0.1"
            - name: POSTGRES_PORT
              value: {{ (.Values.db | default dict).port | default "5432" | quote }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: tandoor-login
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tandoor-login
                  key: password
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: tandoor-login
                  key: password
          ports:
            - name: http
              containerPort: {{ .Values.service.port }} # Ensure this resolves to 8080
              protocol: TCP
          volumeMounts: # Added volume mounts for Tandoor application
            - name: staticfiles
              mountPath: /opt/recipes/staticfiles
            - name: mediafiles
              mountPath: /opt/recipes/mediafiles
      volumes:
        - name: db-vol
          # If you want persistent storage for Postgres, you'll need a PersistentVolumeClaim here
          # For a quick test, emptyDir is fine, but data will be lost if pod restarts
        - name: staticfiles
          # Similarly, for persistent static/media files, use a PersistentVolumeClaim
        - name: mediafiles
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
